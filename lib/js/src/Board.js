// Generated by BUCKLESCRIPT VERSION 1.9.2, PLEASE EDIT WITH CARE
'use strict';

var List             = require("bs-platform/lib/js/list.js");
var $$Array          = require("bs-platform/lib/js/array.js");
var Block            = require("bs-platform/lib/js/block.js");
var Curry            = require("bs-platform/lib/js/curry.js");
var React            = require("react");
var Caml_array       = require("bs-platform/lib/js/caml_array.js");
var ReasonReact      = require("reason-react/lib/js/src/reasonReact.js");
var Square$TicTacToe = require("./Square.js");

function optionStringOfString(value) {
  if (value) {
    return value[0];
  } else {
    return "";
  }
}

function calculateWinner(squares) {
  return List.fold_left((function (acc, line) {
                var match = Caml_array.caml_array_get(squares, line[0]);
                var match$1 = Caml_array.caml_array_get(squares, line[1]);
                var match$2 = Caml_array.caml_array_get(squares, line[2]);
                if (match) {
                  if (match$1) {
                    if (match$2) {
                      var a = match[0];
                      if (a !== "" && a === match$1[0] && a === match$2[0]) {
                        return /* Some */[a];
                      } else {
                        return acc;
                      }
                    } else {
                      return acc;
                    }
                  } else {
                    return acc;
                  }
                } else {
                  return acc;
                }
              }), /* None */0, /* :: */[
              /* tuple */[
                0,
                1,
                2
              ],
              /* :: */[
                /* tuple */[
                  3,
                  4,
                  5
                ],
                /* :: */[
                  /* tuple */[
                    6,
                    7,
                    8
                  ],
                  /* :: */[
                    /* tuple */[
                      0,
                      3,
                      6
                    ],
                    /* :: */[
                      /* tuple */[
                        1,
                        4,
                        7
                      ],
                      /* :: */[
                        /* tuple */[
                          2,
                          5,
                          8
                        ],
                        /* :: */[
                          /* tuple */[
                            0,
                            4,
                            8
                          ],
                          /* :: */[
                            /* tuple */[
                              2,
                              4,
                              6
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var component = ReasonReact.reducerComponent("Board");

function toggleSquare(squares, index, turn) {
  return List.mapi((function (i, square) {
                var match = +(index === i);
                if (match !== 0) {
                  return turn;
                } else {
                  return square;
                }
              }), squares);
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */4];
      var reduce = param[/* reduce */3];
      var renderSquare = function (index) {
        return ReasonReact.element(/* None */0, /* None */0, Square$TicTacToe.make(optionStringOfString(List.nth(state[/* squares */0], index)), Curry._1(reduce, (function () {
                              return /* Click */[index];
                            })), /* array */[]));
      };
      var winner = calculateWinner($$Array.of_list(state[/* squares */0]));
      var status;
      if (winner) {
        status = "Winner " + winner[0];
      } else {
        var match = state[/* xIsNext */1];
        status = "Next player: " + (
          match !== 0 ? "X" : "O"
        );
      }
      return React.createElement("div", undefined, React.createElement("div", {
                      className: "status"
                    }, status), React.createElement("div", {
                      className: "board-row"
                    }, renderSquare(0), renderSquare(1), renderSquare(2)), React.createElement("div", {
                      className: "board-row"
                    }, renderSquare(3), renderSquare(4), renderSquare(5)), React.createElement("div", {
                      className: "board-row"
                    }, renderSquare(6), renderSquare(7), renderSquare(8)));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* squares */$$Array.to_list(Caml_array.caml_make_vect(9, /* Some */[""])),
              /* xIsNext : true */1
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      var match = state[/* xIsNext */1];
      return /* Update */Block.__(0, [/* record */[
                  /* squares */toggleSquare(state[/* squares */0], action[0], /* Some */[match !== 0 ? "X" : "O"]),
                  /* xIsNext */1 - state[/* xIsNext */1]
                ]]);
    });
  return newrecord;
}

exports.optionStringOfString = optionStringOfString;
exports.calculateWinner      = calculateWinner;
exports.component            = component;
exports.toggleSquare         = toggleSquare;
exports.make                 = make;
/* component Not a pure module */
